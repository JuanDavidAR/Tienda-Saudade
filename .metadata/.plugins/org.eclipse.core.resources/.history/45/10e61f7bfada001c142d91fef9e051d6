package com.web.tienda.controller;

import java.io.IOException;
import java.util.List;
import java.util.Optional;

import org.slf4j.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.web.tienda.model.Producto;
import com.web.tienda.model.Usuario;
import com.web.tienda.service.ProductoService;
import com.web.tienda.service.UploadFileService;

@RestController
@RequestMapping("/productos")
public class ProductoController {

	
	private final Logger LOGGER = LoggerFactory.getLogger(ProductoController.class);
	
	@Autowired
	private ProductoService productoService;
	
	@Autowired
	private UploadFileService upload;
	
	
	
	@GetMapping("")
	public List <Producto> show() {
		return productoService.findAll();
	}
	
	
	@PostMapping("/save")
	public String save(@RequestBody Producto producto) throws IOException
	{
		LOGGER.info("Este es el objeto producto {}",producto);
		Usuario u = new Usuario (1,"","","","","","","");
		producto.setUsuario(u);
		
		productoService.save(producto);
		return "Producto guardado";
		
	}	
	
	@GetMapping("/edit/{id}")
	public Producto edit(@PathVariable Integer id) {
		
		Producto producto = new Producto();
		Optional<Producto> optionalProducto = productoService.get(id);
		producto= optionalProducto.get();
		
		LOGGER.info("Producto buscado: {}",producto);
		return producto;	
	}
	
	@PostMapping("/update")
	public String update(Producto producto, @RequestParam("img") MultipartFile file) throws IOException {
		Producto p= new Producto();
		p=productoService.get(producto.getId()).get();
		
		if(file.isEmpty()) {
			
			producto.setImagen(p.getImagen());
		}else { //cuando se edita la imagen 
			
			if(!p.getImagen().equals("default.jpg")) {
				upload.deleteImage(p.getImagen());	
			}

			String nombreImagen = upload.saveImage(file);
			producto.setImagen(nombreImagen);
		}
		producto.setUsuario(p.getUsuario());
		productoService.update(producto);
		return"redirect:/productos";
	}
	
	
	@GetMapping("/delete/{id}")
	public String delete(@PathVariable Integer id) {
		
		Producto p = new Producto();
		p=productoService.get(id).get();
		
		if(!p.getImagen().equals("default.jpg")) {
			upload.deleteImage(p.getImagen());
			
		}
		
		
		productoService.delete(id);
		return "Se ha borrado el producto";
	}
	
}
